#       cfs-com/.gitlab-ci.yml
#
#               Copyright (c) 2014-2018 A.H.L
#
#        Permission is hereby granted, free of charge, to any person obtaining
#        a copy of this software and associated documentation files (the
#        "Software"), to deal in the Software without restriction, including
#        without limitation the rights to use, copy, modify, merge, publish,
#        distribute, sublicense, and/or sell copies of the Software, and to
#        permit persons to whom the Software is furnished to do so, subject to
#        the following conditions:
#
#        The above copyright notice and this permission notice shall be
#        included in all copies or substantial portions of the Software.
#
#        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#        LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#        OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#        WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

stages:
    - Build in docker image
    - Build docker image
    - Test docker image
    - Configure build
    - Build sources
    - Build test sources
    - Unit testing
    - Package artifacts
    - Integration Test
    - Quality assurance
    - Code review
    - Install to local staging repository
    - web site generation
    - Deploy artifacts to staging repositories
    - Clean local artifacts

variables:
    GET_SOURCES_ATTEMPTS: "3"
    ARTIFACT_DOWNLOAD_ATTEMPTS: "10"
    LSB_RELEASE_ID: "$(lsb_release -i 2> /dev/null || echo Distributor ID: Unknown)"
    LSB_RELEASE_RELEASE: "$(lsb_release -r 2> /dev/null || echo Release: Unknown)"
    CACHE_KEY: '$(if [[ ! -z ${CI_COMMIT_TAG+x} || "${CI_COMMIT_REF_SLUG}" == "prod" ]]; then echo "${CI_COMMIT_REF_SLUG}"; else echo "not-prod-or-tag"; fi)'
    # CI_DEBUG_TRACE: "true"
    DOCKER_DRIVER: "overlay2"
    STAGING_REGISTRY: "docker.io"   # docker.io - registry.gitlab.com artifactory.io  jfrog.io
    DTR_NAMESPACE: doevelopper
    DOCKER_HOST: tcp://docker:2375
    PROJECT_SOURCE_DIR: "$CI_PROJECT_DIR"
    ARCH: amd64
    COMMIT_ID: ${CI_COMMIT_SHA:0:8}
    V: "0"

before_script:
    - date
    - docker version || true
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin docker.io
    - echo -e "\033[0;31m****** Starting Gitlab CI-controlled ...******\033[0m"
    - echo -e "\033[0;31m******...continuous integration...******\033[0m"
    - echo -e "\033[0;31m******... continuous deployement...******\033[0m"
    - echo -e "\033[0;31m******... and Continuous Code Quality!******\033[0m"
    - export NUM_CORES=$(nproc --all)
    - export CCACHE_BASEDIR=$CI_PROJECT_DIR
    - export OS_NAME=$(lsb_release -is) || true
    - export OS_VERS_LONG=$(lsb_release -rs | sed -r "s/^([0-9]+).*/\1/") || true
    - export PROJECT_NAME=$CI_PROJECT_NAME
    - export TAG=$CI_BUILD_REF_NAME
    - export BUILD_DATE=$(date +%Y-%m-%d-%H:%M:%S)
    - export COMMIT_TIME=$(git show -s --format=%ct $CI_APPLICATION_TAG)
    # - export VERSION=`git describe --first-parent`|| true
    - env | sort

after_script:
    - date
    - docker version  || true
    - docker logout docker.io || true

include:
    - local: .gitlab/ci/globals.yml
    # - local: .gitlab/ci/base.
    
Fake Job :
    stage: Unit testing
    before_script:
        - echo 'overwrite'
    script:
        - echo 'script'
    after_script:
        - echo 'overwrite'

