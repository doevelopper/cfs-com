#       cfs-com/CMakeLists.txt
#
#               Copyright (c) 2014-2018 A.H.L
#
#        Permission is hereby granted, free of charge, to any person obtaining
#        a copy of this software and associated documentation files (the
#        "Software"), to deal in the Software without restriction, including
#        without limitation the rights to use, copy, modify, merge, publish,
#        distribute, sublicense, and/or sell copies of the Software, and to
#        permit persons to whom the Software is furnished to do so, subject to
#        the following conditions:
#
#        The above copyright notice and this permission notice shall be
#        included in all copies or substantial portions of the Software.
#
#        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#        LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#        OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#        WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

stages:
    - Build docker image
    - Test docker image
    - Push container to DTR
    - Configure build
    - Build sources
    - Build test sources
    - Unit testing
    - Package artifacts
    - Integration Test
    - Quality assurance
    - Code review
    - Install to local staging repository
    - web site generation
    - Deploy artifacts to staging repositories
    - Clean local artifacts

variables:
    GET_SOURCES_ATTEMPTS: "3"
    ARTIFACT_DOWNLOAD_ATTEMPTS: "10"
    LSB_RELEASE_ID: "$(lsb_release -i 2> /dev/null || echo Distributor ID: Unknown)"
    LSB_RELEASE_RELEASE: "$(lsb_release -r 2> /dev/null || echo Release: Unknown)"
    # CI_DEBUG_TRACE: "true"
    DOCKER_DRIVER: "overlay2"
    STAGING_REGISTRY: "docker.io"   # docker.io - registry.gitlab.com artifactory.io  jfrog.io
    DTR_NAMESPACE: ${CI_PROJECT_NAMESPACE}
    DOCKER_HOST: tcp://docker:2375
    PROJECT_SOURCE_DIR: "$CI_PROJECT_DIR"
    ARCH: amd64
    COMMIT_ID: ${CI_COMMIT_SHA:0:8}
    V: "0"

before_script:
    - date
    - docker version || true
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "doevelopper" docker.io --password-stdin
#    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY--password-stdin
    - echo "Starting Gitlab CI-controlled ..."
    - echo "...continuous integration..."
    - echo "... continuous deployement..."
    - echo "... and Continuous Code Quality!"
    - export NUM_CORES=$(nproc --all)
    - export CCACHE_BASEDIR=$CI_PROJECT_DIR
    - export OS_NAME=$(lsb_release -is) || true
    - export OS_VERS_LONG=$(lsb_release -rs | sed -r "s/^([0-9]+).*/\1/") || true
    - export PROJECT_NAME=$CI_PROJECT_NAME
    - export TAG=$CI_BUILD_REF_NAM
    - export BUILD_DATE=$(date +%Y-%m-%d-%H:%M:%S)
    # - export VERSION=`git describe --first-parent`
    - env | sort

after_script:
    - date
    - docker version  || true
    - docker logout docker.io || true

.agent-who: &agent-who
    retry: 1
    tags:
        # - agent-smith
        - gitlab-org
        # - docker


.only_stable: &only_stable
    only:
        - master
        - /^release-.*$/

.tumbleweed: &tumbleweed
    only:
        - develop
        - /^feature-.*$/
        - /^hotfix-.*$/
        - /^bugfix-.*$/
        - /^bugfix[/]v[0-9.]*$/
        - /^support-.*$/

.notify: &notify
  image: alpine
  stage: notification
  cache: {}
  before_script:
    - apk update && apk add git curl bash
  only:
    - schedules
  except:
    variables:
      - $CI_SLACK_NOTIFY != "true"
      - $CI_SLACK_WEBHOOK_URL == null
      - $CI_SLACK_CHANNEL == null

.branch_exceptions: &branch_exceptions
    only:
        - branches
    except:
        - coverity_scan

.docker-prerequisities: &docker-prerequisities
    image: docker.io/doevelopper/cfs-com-dind:0.0.1
    services:
        - docker:dind
    variables: &docker_variables
        DOCKER_DRIVER: "overlay2"
        STAGING_REGISTRY: "docker.io"   # docker.io - registry.gitlab.com artifactory.io  jfrog.io
        DTR_NAMESPACE: "doevelopper"
        DOCKER_HOST: tcp://docker:2375    
        CONTAINER_IMAGE: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/${CI_PROJECT_NAME}
        CONTAINER_RELEASE_IMAGE: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/${CI_PROJECT_NAME}:latest
        DOCKER_BUILD_OPTIONS: DOCKER_TRUSTED_REGISTRY=${STAGING_REGISTRY} DTR_NAMESPACE=${DTR_NAMESPACE} ARCH=amd64 DOCKER_FILE=${DOCKER_FILE}
    # only:
        # refs:
            # - branches
        # changes:
            # - src/main/resources/docker/${ARCH}/Dockerfile

.build-docker-container: &build-docker-container
    <<: *agent-who
    <<: *docker-prerequisities
    variables:
        GOAL: build
        MODULE: "dind"
        DOCKER_BUILD_OPTIONS: DOCKER_TRUSTED_REGISTRY=${STAGING_REGISTRY} DTR_NAMESPACE=${DTR_NAMESPACE} ARCH=amd64 DOCKER_FILE=${DOCKER_FILE}
    before_script:
        - docker info
        - echo "[${GOAL}] <-> ${CI_JOB_NAME}:${CI_JOB_STAGE}"
    script:
        - make DOCKER_TRUSTED_REGISTRY=docker.io DTR_NAMESPACE=${CI_PROJECT_NAMESPACE} ARCH=amd64 DOCKER_FILE=${DOCKER_FILE} GOAL=${GOAL} ${MODULE}
        # - make ${MAKE_DOCKER_BUILD_OPTIONS} GOAL=${GOAL} ${MODULE}

# docker:dind with docker-compose
# https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03/
docker:build:docker-base:
    stage: Build docker image
    <<: *agent-who
    image: docker:19.03.0
    services:
        - docker:19.03.0-dind
    variables:
        GOAL: build
        MODULE: "dind"
        DOCKER_FILE: src/main/resources/docker/dind/Dockerfile
        BUILD_LOG: "2>&1 | tee ${CI_PROJECT_DIR}/dind.log"
        DOCKER_DIRVER: overlay2
        DOCKER_CERT_PATH: "/certs"
        # DOCKER_HOST: tcp://docker:2375
        # DOCKER_TLS_VERIFY: 1
        # DOCKER_CERT_PATH: "/certs/client"
        # DOCKER_TLS_CERTDIR: ""
        VERSION: 0.0.2
        CONTAINER: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/dind:${VERSION}
    script:
        - echo " Building ${DOCKER_FILE}"
        - echo " ${CI_JOB_TOKEN} ${STAGING_REGISTRY} ${DTR_NAMESPACE} ${CI_PROJECT_NAMESPACE}"
        - docker pull ${DOCKER_FILE} || true
        - docker build
            --label org.label-schema.maintainer="${CI_PROJECT_NAMESPACE}"
            --label org.label-schema.title="CFS Docker in Docker"
            --label org.label-schema.description="Dind docker-compose make git"
            --label org.label-schema.name="${CONTAINER}"
            --label org.label-schema.license="Apache 2"
            --label org.label-schema.is-production="yes"
            --label org.label-schema.is-beta="no"
            --label org.label-schema.schema-version="${STAGING_REGISTRY}/${DTR_NAMESPACE}/docker-dind-base:${VERSION}"
            --label org.label-schema.url="$(GIT_REPOS_URL)"
            --label org.label-schema.usage="dind"
            --label org.label-schema.vcs-ref="${COMMIT_ID}"
            --label org.label-schema.vcs-url="$(GIT_REPOS_URL)"
            --label org.label-schema.vcs-type="Git  SCM"
            --label org.label-schema.vendor="Acme Systems Engineering"
            --label org.label-schema.documentation="$(GIT_REPOS_URL)"
            --label org.label-schema.version="${VERSION}"
            --label org.label-schema.docker.cmd="make dind run"
            --label org.label-schema.docker.dockerfile="${DOCKER_FILE}"
            --label org.label-schema.release-date="$(date +%Y-%m-%d-%H:%M:%S)"
            --tag ${CONTAINER}
            --file ${DOCKER_FILE} .
        - time docker push ${CONTAINER}


