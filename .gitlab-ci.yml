stages:
    - Build docker image
    - Test docker image
    - Push container to DTR
    - Configure build
    - Build sources
    - Build test sources
    - Unit testing
    - Package artifacts
    - Integration Test
    - Quality assurance
    - Code review
    - Install to local staging repository
    - web site generation
    - Deploy artifacts to staging repositories
    - Clean local artifacts

variables:
    GET_SOURCES_ATTEMPTS: "3"
    LSB_RELEASE_ID: "$(lsb_release -i 2> /dev/null || echo Distributor ID: Unknown)"
    LSB_RELEASE_RELEASE: "$(lsb_release -r 2> /dev/null || echo Release: Unknown)"
    # CI_DEBUG_TRACE: "true"
    PROJECT_NAME: "$CI_PROJECT_NAME"
    PROJECT_SOURCE_DIR: "$CI_PROJECT_DIR"
    ARCH: amd64

before_script:
    - date
    # - docker version || true
    - echo "Starting Gitlab CI-controlled ..."
    - echo "...continuous integration..."
    - echo "... continuous deployement..."
    - echo "... and Continuous Code Quality!"
    - export NUM_CORES=$(nproc --all)
    - export CCACHE_BASEDIR=$CI_PROJECT_DIR
    # - export OS_NAME=$(lsb_release -is)
    # - export OS_VERS_LONG=$(lsb_release -rs | sed -r "s/^([0-9]+).*/\1/") || true
    - export PROJECT_NAME=$CI_PROJECT_NAME
    - export TAG=$CI_BUILD_REF_NAM
    - export BUILD_DATE=$(date +%Y-%m-%d-%H:%M:%S)
    # - export VERSION=`git describe --first-parent`
    # - env | sort

after_script:
    - date
    # - docker version  || true
#    - docker logout ${CI_REGISTRY}

.agent-who: &agent-who
    retry: 1
    tags:
        # - agent-smith
        - gitlab-org
        # - docker        


.only_stable: &only_stable
    only:
        - master
        - /^release-.*$/

.tumbleweed: &tumbleweed
    only:
        - develop
        - /^feature-.*$/
        - /^hotfix-.*$/
        - /^bugfix-.*$/
        - /^bugfix[/]v[0-9.]*$/
        - /^support-.*$/
  
.branch_exceptions: &branch_exceptions
    only:
        - branches
    except:
        - coverity_scan

.docker-prerequisities: &docker-prerequisities
    image: docker.io/doevelopper/cfs-com-dind:0.0.1
    services:
        - docker:dind
        # command: ["--insecure-registry=registry.gitlab.com"]
    variables:
# When using dind, it's wise to use the overlayfs driver for
# improved performance.
        # DOCKER_DRIVER: "overlay2"
        STAGING_REGISTRY: "docker.io"   # docker.io - registry.gitlab.com artifactory.io  jfrog.io
        DTR_NAMESPACE: ${CI_PROJECT_NAMESPACE}
        DOCKER_HOST: tcp://docker:2375
        CONTAINER_IMAGE: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/${CI_PROJECT_NAME}
        CONTAINER_RELEASE_IMAGE: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/${CI_PROJECT_NAME}:latest
        DOCKER_BUILD_OPTIONS: DOCKER_TRUSTED_REGISTRY=${STAGING_REGISTRY} DTR_NAMESPACE=${DTR_NAMESPACE} ARCH=amd64 DOCKER_FILE=${DOCKER_FILE}

    # only:
        # refs:
            # - branches
        # changes:
            # - src/main/resources/docker/${ARCH}/Dockerfile

.build-docker-container: &build-docker-container
    <<: *agent-who
    <<: *docker-prerequisities
    variables:
        GOAL: build
        MODULE: "dind"
        DOCKER_BUILD_OPTIONS: DOCKER_TRUSTED_REGISTRY=${STAGING_REGISTRY} DTR_NAMESPACE=${DTR_NAMESPACE} ARCH=amd64 DOCKER_FILE=${DOCKER_FILE}
    before_script:
        # - docker info
        - echo "[${GOAL}] <-> ${CI_JOB_NAME}:${CI_JOB_STAGE}"
# docker login asks for the password to be passed through stdin for security
# we use $CI_JOB_TOKEN here which is a special token provided by GitLab
#       - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
#       - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $STAGING_REGISTRY
#       - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
    script:
        - make DOCKER_TRUSTED_REGISTRY=docker.io DTR_NAMESPACE=${CI_PROJECT_NAMESPACE} ARCH=amd64 DOCKER_FILE=${DOCKER_FILE} GOAL=${GOAL} ${MODULE}"
        # - make ${MAKE_DOCKER_BUILD_OPTIONS} GOAL=${GOAL} ${MODULE}

# docker:dind with docker-compose        
.docker:build:docker-base:
    stage: Build docker image
    <<: *build-docker-container
    variables:
        DOCKER_FILE: src/main/resources/docker/dind/Dockerfile
        BUILD_LOG: "2>&1 | tee ${CI_PROJECT_DIR}/dind.log"
    script:
        - echo " $CI_JOB_TOKEN $CI_REGISTRY "
        # - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY--password-stdin
        # - docker pull ${CI_REGISTRY_IMAGE}/dind:0.0.1 || true
        # - time docker build -t ${CONTAINER_IMAGE}/dind:0.0.1 -f ${DOCKER_FILE}  . ${BUILD_LOG}
        # - time docker push ${CONTAINER_IMAGE}/dind:0.0.1  ${BUILD_LOG}

docker:build:dds-base:
    stage: Build docker image
    <<: *build-docker-container
    variables:
        DOCKER_BUILD_OPTIONS: DOCKER_TRUSTED_REGISTRY=${STAGING_REGISTRY} DTR_NAMESPACE=${DTR_NAMESPACE} ARCH=amd64 DOCKER_FILE=${DOCKER_FILE}
        GOAL: build
        MODULE: "dds-base"
        VERSION: 0.0.1
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}
        DOCKER_FILE: src/main/resources/docker/${ARCH}/ng-dev-base/Dockerfile
#    dependencies:
#         - docker:build:dds-base

.docker:build:rti-dds-base:
    stage: Build docker image
    <<: *build-docker-container
    variables:
        GOAL: build
        MODULE: "rti-dds-base"
        VERSION: 0.0.3
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}
        DOCKER_FILE: src/main/resources/docker/${ARCH}/rti/Dockerfile

.docker:build:omg-opendds:
    stage: Build docker image
    <<: *build-docker-container
    variables:
        GOAL: build
        VERSION: 0.0.1
        MODULE: "opendds"
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}
        DOCKER_FILE: src/main/resources/docker/${ARCH}/omg/Dockerfile
#    dependencies:
#        - docker:build:dds-base

.docker:build:adlinkist-vortex:
    stage: Build docker image
    <<: *build-docker-container
    variables:
        GOAL: build
        VERSION: 0.0.1
        MODULE: "opensplice"
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}
        DOCKER_FILE: src/main/resources/docker/${ARCH}/adlinktech/Dockerfile

.docker:build:eprosima-rtps:
    stage: Build docker image
    <<: *build-docker-container
    variables:
        GOAL: build
        VERSION: 0.0.1
        MODULE: "rtps"
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}
        DOCKER_FILE: src/main/resources/docker/${ARCH}/eprosima/Dockerfile

docker:push:dds-base:
    stage: Push container to DTR
    <<: *build-docker-container
#    <<: *only_stable
    variables:
        GOAL: push
        MODULE: "dds-base"
        VERSION: 0.0.1
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}

.docker:push:rti-dds-base:
    stage: Push container to DTR
    <<: *build-docker-container
#    <<: *only_stable
    variables:
        GOAL: push
        VERSION: 0.0.1
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}

.docker:push:omg-opendds:
    stage: Push container to DTR
    <<: *build-docker-container
#    <<: *only_stable
    variables:
        GOAL: push
        VERSION: 0.0.1
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}

.docker:push:adlinkist-vortex:
    stage: Push container to DTR
    <<: *build-docker-container
#    <<: *only_stable
    variables:
        GOAL: push
        VERSION: 0.0.1
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}

.docker:push:eprosima-rtps:
    stage: Push container to DTR
    <<: *build-docker-container
#    <<: *only_stable
    variables:
        GOAL: push
        VERSION: 0.0.1
        IMAGE_NAME: ${CONTAINER_IMAGE}
        IMAGE_TAG: ${IMAGE_NAME}:${VERSION}

.docker:clean::none:
    stage: Clean local artifacts
    <<: *build-docker-container
    script:
        - echo "if yes | docker system prune; then echo "Success"; fi"

