.dedicated-runner: &dedicated-runner
    retry: 1
    tags:
        - dds
	
stages:
    - dependencies
    - configure
    - compile
    - test-compile
    - unit-test
    - target-package
    - feature-test
    - verify
    - code-review
    - target-install
    - site
    - deploy
    - target-clean

# Cache in between builds
cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
        - compilers
        - vendor/ruby

install-embedded-dependencies:
    stage: dependencies
    before_script:
        - echo  "Installing build tools for AArch64"
    script:
        - date -u
        - uname -a
        - mkdir --parents --verbose $CI_PROJECT_NAMESPACE/cmake
        - |
            wget -qO- "https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.tar.gz" \
                | tar --strip-components=1 --extract --gzip -C $CI_PROJECT_NAMESPACE/cmake

        - wget https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-a/8.2-2018.08/gcc-arm-8.2-2018.08-x86_64-aarch64-linux-gnu.tar.xz
        - tar xfj gcc-arm-8.2-2018.08-x86_64-aarch64-linux-gnu.tar.xz > /dev/null
        - mv --verbose gcc-arm-8.2-2018.08-x86_64-aarch64-linux-gnu $CI_PROJECT_NAMESPACE/compilers

        - wget https://releases.linaro.org/components/toolchain/binaries/latest-7/aarch64-linux-gnu/gcc-linaro-7.3.1-2018.05-i686_aarch64-linux-gnu.tar.xz
        - tar xfj gcc-linaro-7.3.1-2018.05-i686_aarch64-linux-gnu.tar.xz > /dev/null
        - mv --verbose gcc-linaro-7.3.1-2018.05-i686_aarch64-linux-gnu $CI_PROJECT_NAMESPACE/compiler
    only:
#        variables:
            - ${AArch64}
    artifacts:
        paths:
        - $CI_PROJECT_NAMESPACE/compilers

install-dependencies:
    stage: dependencies
    before_script:
        - echo  "Installing build tools for Linux AMDx64"
    script: 
    - echo "Only when BOOTSTRAP is true"
    - date -u
    - uname -a

    - wget http://ftp.gnu.org/pub/gnu/make/make-4.2.1.tar.gz
    - tar xfj make-4.2.1.tar.gz > /dev/null
    - cd make-4.2.1
    - ./configure --prefix=$CI_PROJECT_NAMESPACE/dds
    - make && make install
    - PATH=$CI_PROJECT_NAMESPACE/dds/bin:$PATH
    - cd ..

    - wget https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.tar.gz
    - tar -xvf cmake-3.12.3-Linux-x86_64.tar.gz > /dev/null
    - mv cmake-3.12.3-Linux-x86_64 cmake
    - PATH=$CI_PROJECT_NAMESPACE/dds:$CI_PROJECT_NAMESPACE/cmake:$CI_PROJECT_NAMESPACE/cmake/bin:$PATH

    - git clone --depth=1 https://github.com/uncrustify/uncrustify.git
    - cd uncrustify
    - cmake -E make_directory build
    - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds
    - cmake --build build --target all --clean-first
    - cmake --build build --target install
    - cd ..

    - git clone --depth=1 https://github.com/danmar/cppcheck.git
    - cd cppcheck
    - make SRCDIR=build CFGDIR=cfg HAVE_RULES=yes CXXFLAGS="-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function"
    - cp --verbose cppcheck  $CI_PROJECT_NAMESPACE/dds/bin
    - cp --recursive --verbose cfg  $CI_PROJECT_NAMESPACE/dds/bin
    - cd ..

    - git clone --depth=1 https://github.com/doxygen/doxygen.git
    - cd doxygen
    - cmake -E make_directory build
    - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds
    - cmake --build build --target all --clean-first
    - cmake --build build --target install
    - cd ..

    - git clone --depth=1 https://github.com/uncrustify/uncrustify.git
    - cd doxygen
    - cmake -E make_directory build
    - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds
    - cmake --build build --target all --clean-first
    - cmake --build build --target install
    - cd ..

    - git clone --depth=1 https://github.com/libexpat/libexpat.git
    - cd libexpat/expat
    - cmake -E make_directory build
    - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - cmake --build build --target all --clean-first
    - cmake --build build --target install
    - cd ..

    - wget http://www-eu.apache.org/dist//apr/apr-1.6.3.tar.gz
    - tar -xvzf apr-1.6.3.tar.gz > /dev/null
    - cd   apr-1.6.3
    - |
        ./configure --prefix=$CI_PROJECT_NAMESPACE/dds --enable-threads --enable-posix-shm \
            --enable-allocator-guard-pages --enable-pool-concurrency-check --enable-other-child
    - make clean && make && make install
    - cd ..

    - wget http://www-eu.apache.org/dist//apr/apr-util-1.6.1.tar.gz
    - tar -xvf apr-util-1.6.1.tar.gz > /dev/null
    - cd apr-util-1.6.1
    - ./configure --prefix=$CI_PROJECT_NAMESPACE/dds --with-apr=../apr-1.6.3 --with-crypto
    - make clean && make && make install
    - cd ..

    - wget http://www-us.apache.org/dist//xerces/c/3/sources/xerces-c-3.2.1.tar.gz
    - tar -xvzf xerces-c-3.2.1.tar.gz  > /dev/null
    - cd xerces-c-3.2.1/
    - | 
        ./configure --prefix=$CI_PROJECT_NAMESPACE/dds --enable-static --enable-shared --enable-netaccessor-socket \
                   --enable-transcoder-gnuiconv --enable-transcoder-iconv --enable-msgloader-inmemory \
                   --enable-xmlch-uint16_t --enable-xmlch-char16_t
    - make -j2 | tee $CI_PROJECT_NAMESPACE/build-logs/xerces-build.log
    - make install | tee -a $CI_PROJECT_NAMESPACE/build-logs/xerces-build.log
    - cd ..

    - git clone --depth=1 --recurse-submodules https://github.com/google/googletest.git
    - git clone https://github.com/google/googletest.git
    - cd googletest
    - cmake -E chdir build cmake -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds/ ..
    - cmake --build build
    - cmake --build build --target install
    - cd ..

    - git clone --depth=1 --recurse-submodules https://github.com/google/benchmark.git
    - cd benchmark
    - cmake -E chdir build cmake -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds ..
    - cmake --build build
    - cmake --build build --target install
    - cd ..

    - git clone --depth=1 --recurse-submodules https://code.wireshark.org/review/p/wireshark.git
    - cd wireshark
    - cmake -E make_directory build
    - cmake -E chdir build cmake -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds ..
    - cmake --build build --target install
    - cd ..

#    - if [[ "${SYSTEM_BOOST_PACKAGE}" != "" ]]; then sudo add-apt-repository ppa:boost-latest/ppa  && sudo apt-get update -qq; fi
    - wget https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz
    - tar -xvf boost_1_68_0.tar.gz > /dev/null
    - cd boost_1_68_0
    - ./bootstrap.sh [--with-libraries=program_options,filesystem,system,date-time,regex,thread]
    - ./b2 link=shared threading=multi variant=release --prefix=$CI_PROJECT_NAMESPACE/dds
    - cd ..

    - git clone --depth=1 --recurse-submodules  https://github.com/cucumber/cucumber-cpp.git
    - cd cucumber-cpp
    - sudo apt-get install ruby
    - ruby --version
    - sudo apt-get install ruby-dev
    - sudo gem install bundler
    - bundle install
    - cmake -E chdir build cmake -DCUKE_ENABLE_EXAMPLES=on -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds ..
    - cmake --build build
    - cmake --build build --target test
    - cmake --build build --target features
    - cmake --build build --target install
    - cd ..

    - git clone --depth=1 https://git-wip-us.apache.org/repos/asf/logging-log4cxx.git
    - cd logging-log4cxx
    - ./autogen.sh
    - |
        ./configure --with-apr=/opt/dds --with-apr-util=/opt/dds \
            --with-ODBC=no --with-SMTP=no \
            --enable-char --enable-wchar_t \
            --with-charset=utf-8 --with-logchar=utf-8
    - make && make install
    - cd ..

    - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/MPC.git
    - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/ACE_TAO.git
    - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/CIAO.git
    - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/DAnCE.git
    - git clone --depth=1 --recurse-submodules https://github.com/objectcomputing/OpenDDS.git

    - cd OpenDDS
    - |
        ./configure -std=c++11 --ipv6 \
            --openssl --xerces3 --rapidjson --glib --boost \
            --no-tests \
            --ace=$ACE_ROOT --tao=$TAO_ROOT --mpc=$MPC_ROOT \
            --prefix=$CI_PROJECT_NAMESPACE/dds/opendds-dev
    - make clean && make && make install
    - cd ..

    only:
#        variables:
            - ${BOOTSTRAP}
    artifacts:
        paths:
        - $CI_PROJECT_NAMESPACE/dds

before_script:
    - date
    - export NUM_CORES=$(nproc --all)
    - export CCACHE_BASEDIR=$CI_PROJECT_DIR
    - export OS_NAME=$(lsb_release -is)
    - export OS_VERS_LONG=$(lsb_release -rs | sed -r "s/^([0-9]+).*/\1/") || true
    - export PROJECT_NAME=$CI_PROJECT_NAME
    - export TAG=$CI_BUILD_REF_NAM
    - export BUILD_DATE=$(date +%Y-%m-%d-%H:%M:%S)
    - export VERSION=`git describe --first-parent`
    - COVERITY_COVERAGE_FLAG="--all --enable-slow"

after_script:
    - date

validate:
    <<: *dedicated-runner 
    variables:
        JOB_DATE: "date +%Y-%m-%d-%H:%M:%S"
    stage: configure
    before_script:
        - echo "Validate the project is correct and all necessary information is available."
    script:
       - > 
           if [ ! -d "${BUILD_DIRECTORY}" ]; then
              cmake -E make_directory ${BUILD_DIRECTORY}
              cmake -E touch ${BUILD_DIRECTORY}/.keepme
           fi
    after_script:
        - echo "${BUILD_DIRECTORY} directory created"
    artifacts:
        name: "${CI_BUILD_NAME}"
        expire_in: 2 hrs
        paths:
            - ${BUILD_DIRECTORY}
    cache:
        key: "$CI_BUILD_REF" #"$CI_BUILD_REF_NAME"
        untracked: true
        paths:
            - $BUILD_DIRECTORY

.initialize:
    <<: *dedicated-runner
    variables:
        JOB_DATE: "date +%Y-%m-%d-%H:%M:%S"
        CC: /usr/bin/gcc
        CXX: /usr/bin/g++
    stage: configure
#    dependencies:
#        - validate
    before_script:
        - echo $CI_PIPELINE_ID
        - echo "Initialize ${CI_PROJECT_NAME} build state, e.g. set properties or create directories."
    script:
        - >
            if [ ! -d "${BUILD_DIRECTORY}" ]; then
                cmake -E make_directory ${BUILD_DIRECTORY}
            fi

        - cmake -E chdir $BUILD_DIRECTORY cmake -G "${BUILD_GENERATOR}" 
                -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} 
                -DCMAKE_EXPORT_COMPILE_COMMANDS=ON 
                -DCMAKE_INSTALL_PREFIX=${BUILD_INSTALL_DIRECTORY}/ ..

    after_script:
        - echo "${CI_PROJECT_NAME} initialization done"

    artifacts:
        name: "${CI_BUILD_NAME}" 
        expire_in: 1 hour 
        paths:
            - $BUILD_DIRECTORY

    cache:
        key: "$CI_BUILD_REF"
        untracked: true
        paths:
            - $BUILD_DIRECTORY

.compile:
    <<: *dedicated-runner
    stage: compile
    variables:
        QTDIR: $CI_PROJECT_NAMESPACE/Qt5.11.2/5.11.2/gcc_64
        CMAKE_INSTALL_PREFIX: $CI_PROJECT_NAMESPACE/dds

    before_script:
        - echo  "Compile the source code of the project."

    script:
        - echo " Build Options ${BUILD_OPTIONS}"

    after_script:
        - echo " Build Options ${BUILD_OPTIONS}"
        - echo "Compile the source code done."²

    dependencies: []

    artifacts:
         name: "${CI_BUILD_NAME}"
         expire_in: 1 hour
         paths:
             - $BUILD_DIRECTOR

    only:
        - branches
        - tags

.unit-test: &unit-test
    <<: *dedicated-runner
    stage: unit-test
    variables: &unit-test-variable
        DDS_TYPE: OPENDDS

    before_script:
        - echo ${DDS_TYPE} $BUILD_OPTIONS
    script:
        - echo ${DDS_TYPE} $BUILD_OPTIONS
    after_script:
        - echo ${DDS_TYPE} $BUILD_OPTIONS

    dependencies: []
    only:
        - master
        - tags

.unit-test:adlinktech:
    <<: *unit-test
    variables:
        <<: *unit-test-variable
        DDS_TYPE: vortex-opensplice

.unit-test:objectcomputing:
    <<: *unit-test
    variables:
        <<: *unit-test-variable
        DDS_TYPE: opendds

.unit-test:eProsima:
    <<: *unit-test
    variables:
        <<: *unit-test-variable
        DDS_TYPE: fast-RTPS

.unit-test:real-time-innovation:
    <<: *unit-test
    variables:
        <<: *unit-test-variable
        DDS_TYPE: ConnextDDS
