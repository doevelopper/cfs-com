stages:
    - Build docker image
    - Test docker image
    - Push container to DTR
    - validate    # - validate the project is correct and all necessary information is available
    - build       # - compile the source code of the project
    - test        # - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
    - package     # - take the compiled code and package it in its distributable format, such as a JAR.
    - verify      # - run any checks on results of integration tests to ensure quality criteria are met
    - install     # - install the package into the local repository, for use as a dependency in other projects locally
    - deploy      # - done in the build environment, copies the final package to the remote repository for sharing with other developers and 

# When using dind, it's wise to use the overlayfs driver for
# improved performance.
variables:
    DOCKER_DRIVER: "overlay2"
    STAGING_REGISTRY: "registry.gitlab.com"   # docker.io - registry.gitlab.com artifactory
    DTR_NAMESPACE: "doevelopper"
    CONTAINER_DEV_IMAGE: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/${CI_PROJECT_NAME}:${CI_BUILD_REF_NAME}_${CI_BUILD_REF}
    CONTAINER_RELEASE_IMAGE: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/${CI_PROJECT_NAME}:${CI_BUILD_REF_NAME}_${CI_BUILD_REF}
    MAKE_DOCKER_BUILD_OPTIONS: -DDOCKER_TRUSTED_REGISTRY=${STAGING_REGISTRY} -DDTR_NAMESPACE=${DTR_NAMESPACE} -DARCH=amd64

before_script:
    - date
    - docker version
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $STAGING_REGISTRY
#     - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin

after_script:
    - date
    - docker version
#    - docker logout ${CI_REGISTRY}

.agent-who: &agent-who
    retry: 1
    tags:
        - agent-smith

.unit-test: &unit-test
    stage: test
    variables: &unit-test-variable
        DDS_TYPE: OPENDDS

    before_script:
        - echo ${DDS_TYPE} $BUILD_OPTIONS

    script:
        - echo ${DDS_TYPE} $BUILD_OPTIONS

    after_script:
        - echo ${DDS_TYPE} $BUILD_OPTIONS

    dependencies: []
    only:
        - master
        - tags

.build_template: &build_definition
    stage: build
    script:
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -G "${BUILD_GENERATOR}" 
                -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} 
                -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
    artifacts:
        name: "slg-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
        when: always
        paths:
        - "build/*"

.only_stable: &only_stable
    only:
        - master
        - /^release-.*$/

.tumbleweed: &tumbleweed
    only:
        - develop
        - /^feature-.*$/
        - /^hotfix-.*$/
        - /^bugfix-.*$/
        - /^support-.*$/
        - /^poc-.*$/

.docker-prerequisities: &docker-prerequisities
    image: docker:stable
    services:
        - docker:dind

docker build:
    <<: *docker-prerequisities
    <<: *tumbleweed
    stage: Build docker image
    script:
        - make ${MAKE_DOCKER_BUILD_OPTIONS}

docker test:
    <<: *docker-prerequisities
    <<: *tumbleweed
    stage: Test docker image
    script:
        - make ${MAKE_DOCKER_BUILD_OPTIONS}

docker push:
    <<: *docker-prerequisities
    <<: *only_stable
    stage: Push container to DTR
    script:
        - make ${MAKE_DOCKER_BUILD_OPTIONS}

unit-test:adlinktech:
    image: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/cfs-com/vortex:latest
    <<: *unit-test
    variables:
        <<: *unit-test-variable
        DDS_TYPE: vortex-opensplice

unit-test:objectcomputing:
    image: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/cfs-com/opendds:latest
    <<: *unit-test
    variables:
        <<: *unit-test-variable
        DDS_TYPE: opendds

unit-test:eProsima:
    image: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/cfs-com/eprosima:latest
    <<: *unit-test
    variables:
        <<: *unit-test-variable
        DDS_TYPE: fast-RTPS

unit-test:real-time-innovation:
    image: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/cfs-com/connext:latest
    <<: *unit-test
    variables:
        <<: *unit-test-variable
        DDS_TYPE: ConnextDDS



