#         cfs-com/.gitlab/ci/globals.yml
#
#               Copyright (c) 2014-2018 A.H.L
#
#        Permission is hereby granted, free of charge, to any person obtaining
#        a copy of this software and associated documentation files (the
#        "Software"), to deal in the Software without restriction, including
#        without limitation the rights to use, copy, modify, merge, publish,
#        distribute, sublicense, and/or sell copies of the Software, and to
#        permit persons to whom the Software is furnished to do so, subject to
#        the following conditions:
#
#        The above copyright notice and this permission notice shall be
#        included in all copies or substantial portions of the Software.
#
#        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#        LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#        OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#        WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

.agent-who:
    retry: 
        max: 1
        when:
            - unknown_failure
            - api_failure
            - runner_system_failure
    tags:
        # - agent-smith
        - gitlab-org
        - docker

.default-cache: &default-cache
    key: "dind-${CI_BUILD_REF_NAME}_${CI_BUILD_REF}"
    paths:
        - ${CI_PROJECT_PATH}/.cache

.agent-who-default-cache:
    extends: .agent-who
    cache:
        <<: *default-cache

# Jobs that only need to pull cache
.dedicated-pull-cache-job:
    extends: .agent-who
    cache:
        <<: *default-cache
        policy: pull
    stage: Unit testing

.only_stable:
    only:
        - master
        - /^release-.*$/

.tumbleweed:
    only:
        - develop
        - /^feature-.*$/
        - /^hotfix-.*$/
        - /^bugfix-.*$/
        - /^bugfix[/]v[0-9.]*$/
        - /^support-.*$/
#        - /(develop|feature|bugfix|hotfix)\/?(.*)/

.notify:
    image: alpine
    stage: notification
    cache: {}
    before_script:
        - apk update && apk add git curl bash
    only:
        - schedules
    except:
        variables:
            - $CI_SLACK_NOTIFY != "true"
            - $CI_SLACK_WEBHOOK_URL == null
            - $CI_SLACK_CHANNEL == null

.branch_exceptions:
    only:
        - branches
    except:
        - coverity_scan

.amd64_variables:
    variables:
        IMAGE_ARCH=amd64

.arm64v8_variables:
    variables:
        IMAGE_ARCH=arm64v8

.pre_shared: &pre_shared 
    before_script:
        - date
        - docker version || true
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin docker.io
        - echo -e "\033[0;31m****** Starting Gitlab CI-controlled ...******\033[0m"
        - echo -e "\033[0;31m******...continuous integration...******\033[0m"
        - echo -e "\033[0;31m******... continuous deployement...******\033[0m"
        - echo -e "\033[0;31m******... and Continuous Code Quality!******\033[0m"
        - env | sort

.post_shared: &post_shared 
    after_script:
        - date
        - docker version  || true
        - docker logout docker.io || true

.docker-hub-dind: &docker-hub-dind
    stage: Build in docker image
    extends: .agent-who
    image: docker:19.03.0
    services:
        - docker:19.03.0-dind
    variables: &dind_hub_variables
        DOCKER_DIRVER: overlay2
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_VERIFY: 1
        DOCKER_TLS_CERTDIR: "/certs"
        DOCKER_CERT_PATH: "/certs/client"

.docker: &docker
    services:
        - docker:dind
    variables: &docker_variables
        DOCKER_DIRVER: overlay2
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_VERIFY: 1
        DOCKER_TLS_CERTDIR: "/certs"
        DOCKER_CERT_PATH: "/certs/client"
        ROOT_CONTAINER_IMAGE: ${STAGING_REGISTRY}/${DTR_NAMESPACE}/${CI_PROJECT_NAME}

.docker-app-prerequisities: &docker-app-prerequisities
    variables: &docker_app_variables
    image: docker.io/doevelopper/dind:0.0.2
    variable: 
        DOCKER_BUILD_OPTIONS: DOCKER_TRUSTED_REGISTRY=${STAGING_REGISTRY} DTR_NAMESPACE=${DTR_NAMESPACE} ARCH=amd64 DOCKER_FILE=${DOCKER_FILE} IMG_NAME=${CONTAINER}
        # DOCKER_BUILD_OPTIONS: DOCKER_TRUSTED_REGISTRY=docker.io DTR_NAMESPACE=doevelopper ARCH=${ARCH} DOCKER_FILE=${DOCKER_FILE}        
    # only:
        # refs:
            # - branches
        # changes:
            # - src/main/resources/docker/${ARCH}/Dockerfile

.create-docker-container: &create-docker-container
    extends: .agent-who
    <<: *docker-app-prerequisities
    variables:
        GOAL: build
        MODULE: "dind"
    before_script:
        - echo "Performing (${GOAL}) on (${MODULE}) (${CI_JOB_STAGE}[${CI_JOB_NAME}])"
        - export DTR_PASSWORD=$DOCKER_PASSWORD
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin docker.io
    script:
        - echo "DOCKER_BUILD_OPTIONS ${DOCKER_BUILD_OPTIONS}"
        - echo "make ${MAKE_DOCKER_BUILD_OPTIONS} GOAL=${GOAL} ${MODULE}"
