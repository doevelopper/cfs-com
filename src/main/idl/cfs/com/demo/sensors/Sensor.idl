
module cfs
{

    module com
    {
        const string GPS_MODE_LOCKED = "Locked";
        const string GPS_MODE_UNLOCKED = "Unlocked";
        const string GPS_MODE_TRACKING = "Tracking";

        @topic
        struct GPSInfo
        {
            @key 
			string source_id;       /** NAV source identifier */
            short satellite_count;
            double freq_variance; 	/** Frequency Stability/Variance of Reference Source */
            double time_variance; 	/** Timing Stability/Variance of Reference Source */
            double freq_offset; 	/** Frequency offset of Reference Source */
            double time_offset; 	/** Characterization of the Reference Source - should be mostly 0 */
        };

        struct SatelliteInfo
        {
        	long prn;
        	long elevation;
        	long azimuth;
        	long snr;
        };

        enum RETURN_VALUE
        {
            RETVAL_OK,
            RETVAL_INVALID_PRECONDITION,
            RETVAL_OBJECT_NOT_FOUND,
            RETVAL_NOT_IMPLEMENTED,
            RETVAL_UNKNOWN_ERROR
          };

        enum TemperatureScale
        {
            CELSIUS,
            FAHRENHEIT,
            KELVIN
        };

        @topic
        struct Sensor_information
        {
            @key 
			//string<256> ID; //@key
            double ambientTemperature;
            double objectTemperature;
            double accelerometerX;
            double accelerometerY;
            double accelerometerZ;
            double altitude;
            double light;
            double humidity;
            TemperatureScale scale;
        };

        @topic
        struct Message
        {
            @key
            long time;  // @key
            string content;
        };

        struct Distance
        {
            @key
            long sensorId; //@key
            float value;	// Distance in meters
        };
    };
};

/*
#ifdef CFS_OPENDDS_DDS
    #pragma DCPS_DATA_TYPE "cfs::com::anExample"
    #pragma DCPS_DATA_KEY "cfs::com::AType aType"
#endif

#ifdef CFS_COREDX_DDS
    #define DDS_KEY __dds_key
#else
    #define DDS_KEY
#endif

const long MAX_NUM_JOINTS = 32;
typedef sequence<float, MAX_NUM_JOINTS> aTypeSeq;

struct anExample
{
  DDS_KEY long  aType; //@key
  aTypeSeq aTseq;
};

#ifdef CFS_OPENSPLICE_DDS
	#pragma keylist AType aType
#endif
*/