/* -*- C++ -*- */
/* Generated by opendds_idl version 3.15 (ACE version 6.5.8) running on input file Messenger.idl */
#ifndef OPENDDS_IDL_GENERATED_MESSENGERTYPESUPPORTIMPL_H_UWTOWD
#define OPENDDS_IDL_GENERATED_MESSENGERTYPESUPPORTIMPL_H_UWTOWD
#include "MessengerC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "MessengerTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: cfs */



/* Begin MODULE: com */



/* Begin MODULE: Messenger */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const cfs::com::Messenger::Message& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const cfs::com::Messenger::Message& stru);

bool operator>>(Serializer& strm, cfs::com::Messenger::Message& stru);

size_t gen_max_marshaled_size(const cfs::com::Messenger::Message& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const cfs::com::Messenger::Message> stru, bool align);

void gen_find_size(KeyOnly<const cfs::com::Messenger::Message> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const cfs::com::Messenger::Message> stru);

bool operator>>(Serializer& strm, KeyOnly<cfs::com::Messenger::Message> stru);

template <>
struct MarshalTraits<cfs::com::Messenger::Message> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace cfs {
namespace com {
namespace Messenger {
/// This structure supports use of std::map with one or more keys.
struct  Message_OpenDDS_KeyLessThan {
  bool operator()(const cfs::com::Messenger::Message& v1, const cfs::com::Messenger::Message& v2) const
  {
    if (v1.subject_id() < v2.subject_id()) return true;
    if (v2.subject_id() < v1.subject_id()) return false;
    return false;
  }
};
}
}
}


namespace cfs {
namespace com {
namespace Messenger {
class MessageTypeSupportImpl;
}
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<cfs::com::Messenger::Message> {
  typedef cfs::com::Messenger::Message MessageType;
  typedef cfs::com::Messenger::MessageSeq MessageSequenceType;
  typedef cfs::com::Messenger::MessageTypeSupport TypeSupportType;
  typedef cfs::com::Messenger::MessageTypeSupportImpl TypeSupportTypeImpl;
  typedef cfs::com::Messenger::MessageDataWriter DataWriterType;
  typedef cfs::com::Messenger::MessageDataReader DataReaderType;
  typedef cfs::com::Messenger::Message_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "cfs::com::Messenger::Message"; }
  static bool gen_has_key () { return true; }
  static size_t key_count () { return 1; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace cfs {
namespace com {
namespace Messenger {
class  MessageTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MessageTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Message> TraitsType;
  typedef MessageTypeSupport TypeSupportType;
  typedef MessageTypeSupport::_var_type _var_type;
  typedef MessageTypeSupport::_ptr_type _ptr_type;

  MessageTypeSupportImpl() {}
  virtual ~MessageTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MessageTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<cfs::com::Messenger::Message>();
bool gen_skip_over(Serializer& ser, cfs::com::Messenger::Message*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger */

/* End MODULE: com */

/* End MODULE: cfs */
#endif /* OPENDDS_IDL_GENERATED_MESSENGERTYPESUPPORTIMPL_H_UWTOWD */
